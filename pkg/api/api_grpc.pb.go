// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPortfolioServiceClient is the client API for UserPortfolioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPortfolioServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*Empty, error)
	RetrieveUser(ctx context.Context, in *RetrieveUserRequest, opts ...grpc.CallOption) (*User, error)
	RetrieveOrCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error)
	RetrieveOrCreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*Portfolio, error)
	RetrieveOrCreatePortfolioItem(ctx context.Context, in *CreatePortfolioItemRequest, opts ...grpc.CallOption) (*PortfolioItem, error)
	DeletePortfolioItem(ctx context.Context, in *DeletePortfolioItemRequest, opts ...grpc.CallOption) (*Empty, error)
	AvailableMarketItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MarketItemsResponse, error)
	MarketItemsPrices(ctx context.Context, in *MarketItemPricesRequest, opts ...grpc.CallOption) (*MarketItemPricesResponse, error)
	MarketLastPrices(ctx context.Context, in *MarketLastPricesRequest, opts ...grpc.CallOption) (*MarketItemPricesResponse, error)
}

type userPortfolioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPortfolioServiceClient(cc grpc.ClientConnInterface) UserPortfolioServiceClient {
	return &userPortfolioServiceClient{cc}
}

func (c *userPortfolioServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) RetrieveUser(ctx context.Context, in *RetrieveUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/RetrieveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) RetrieveOrCreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/RetrieveOrCreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) RetrieveOrCreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*Portfolio, error) {
	out := new(Portfolio)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/RetrieveOrCreatePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) RetrieveOrCreatePortfolioItem(ctx context.Context, in *CreatePortfolioItemRequest, opts ...grpc.CallOption) (*PortfolioItem, error) {
	out := new(PortfolioItem)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/RetrieveOrCreatePortfolioItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) DeletePortfolioItem(ctx context.Context, in *DeletePortfolioItemRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/DeletePortfolioItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) AvailableMarketItems(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MarketItemsResponse, error) {
	out := new(MarketItemsResponse)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/AvailableMarketItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) MarketItemsPrices(ctx context.Context, in *MarketItemPricesRequest, opts ...grpc.CallOption) (*MarketItemPricesResponse, error) {
	out := new(MarketItemPricesResponse)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/MarketItemsPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPortfolioServiceClient) MarketLastPrices(ctx context.Context, in *MarketLastPricesRequest, opts ...grpc.CallOption) (*MarketItemPricesResponse, error) {
	out := new(MarketItemPricesResponse)
	err := c.cc.Invoke(ctx, "/api.UserPortfolioService/MarketLastPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPortfolioServiceServer is the server API for UserPortfolioService service.
// All implementations must embed UnimplementedUserPortfolioServiceServer
// for forward compatibility
type UserPortfolioServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*Empty, error)
	RetrieveUser(context.Context, *RetrieveUserRequest) (*User, error)
	RetrieveOrCreateUser(context.Context, *CreateUserRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*Empty, error)
	RetrieveOrCreatePortfolio(context.Context, *CreatePortfolioRequest) (*Portfolio, error)
	RetrieveOrCreatePortfolioItem(context.Context, *CreatePortfolioItemRequest) (*PortfolioItem, error)
	DeletePortfolioItem(context.Context, *DeletePortfolioItemRequest) (*Empty, error)
	AvailableMarketItems(context.Context, *Empty) (*MarketItemsResponse, error)
	MarketItemsPrices(context.Context, *MarketItemPricesRequest) (*MarketItemPricesResponse, error)
	MarketLastPrices(context.Context, *MarketLastPricesRequest) (*MarketItemPricesResponse, error)
	mustEmbedUnimplementedUserPortfolioServiceServer()
}

// UnimplementedUserPortfolioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPortfolioServiceServer struct {
}

func (UnimplementedUserPortfolioServiceServer) CreateUser(context.Context, *CreateUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserPortfolioServiceServer) RetrieveUser(context.Context, *RetrieveUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveUser not implemented")
}
func (UnimplementedUserPortfolioServiceServer) RetrieveOrCreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOrCreateUser not implemented")
}
func (UnimplementedUserPortfolioServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserPortfolioServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserPortfolioServiceServer) RetrieveOrCreatePortfolio(context.Context, *CreatePortfolioRequest) (*Portfolio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOrCreatePortfolio not implemented")
}
func (UnimplementedUserPortfolioServiceServer) RetrieveOrCreatePortfolioItem(context.Context, *CreatePortfolioItemRequest) (*PortfolioItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOrCreatePortfolioItem not implemented")
}
func (UnimplementedUserPortfolioServiceServer) DeletePortfolioItem(context.Context, *DeletePortfolioItemRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortfolioItem not implemented")
}
func (UnimplementedUserPortfolioServiceServer) AvailableMarketItems(context.Context, *Empty) (*MarketItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableMarketItems not implemented")
}
func (UnimplementedUserPortfolioServiceServer) MarketItemsPrices(context.Context, *MarketItemPricesRequest) (*MarketItemPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketItemsPrices not implemented")
}
func (UnimplementedUserPortfolioServiceServer) MarketLastPrices(context.Context, *MarketLastPricesRequest) (*MarketItemPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketLastPrices not implemented")
}
func (UnimplementedUserPortfolioServiceServer) mustEmbedUnimplementedUserPortfolioServiceServer() {}

// UnsafeUserPortfolioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPortfolioServiceServer will
// result in compilation errors.
type UnsafeUserPortfolioServiceServer interface {
	mustEmbedUnimplementedUserPortfolioServiceServer()
}

func RegisterUserPortfolioServiceServer(s grpc.ServiceRegistrar, srv UserPortfolioServiceServer) {
	s.RegisterService(&UserPortfolioService_ServiceDesc, srv)
}

func _UserPortfolioService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_RetrieveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).RetrieveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/RetrieveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).RetrieveUser(ctx, req.(*RetrieveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_RetrieveOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).RetrieveOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/RetrieveOrCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).RetrieveOrCreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_RetrieveOrCreatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).RetrieveOrCreatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/RetrieveOrCreatePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).RetrieveOrCreatePortfolio(ctx, req.(*CreatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_RetrieveOrCreatePortfolioItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).RetrieveOrCreatePortfolioItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/RetrieveOrCreatePortfolioItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).RetrieveOrCreatePortfolioItem(ctx, req.(*CreatePortfolioItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_DeletePortfolioItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortfolioItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).DeletePortfolioItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/DeletePortfolioItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).DeletePortfolioItem(ctx, req.(*DeletePortfolioItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_AvailableMarketItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).AvailableMarketItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/AvailableMarketItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).AvailableMarketItems(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_MarketItemsPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketItemPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).MarketItemsPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/MarketItemsPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).MarketItemsPrices(ctx, req.(*MarketItemPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPortfolioService_MarketLastPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketLastPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPortfolioServiceServer).MarketLastPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserPortfolioService/MarketLastPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPortfolioServiceServer).MarketLastPrices(ctx, req.(*MarketLastPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPortfolioService_ServiceDesc is the grpc.ServiceDesc for UserPortfolioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPortfolioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserPortfolioService",
	HandlerType: (*UserPortfolioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserPortfolioService_CreateUser_Handler,
		},
		{
			MethodName: "RetrieveUser",
			Handler:    _UserPortfolioService_RetrieveUser_Handler,
		},
		{
			MethodName: "RetrieveOrCreateUser",
			Handler:    _UserPortfolioService_RetrieveOrCreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserPortfolioService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserPortfolioService_DeleteUser_Handler,
		},
		{
			MethodName: "RetrieveOrCreatePortfolio",
			Handler:    _UserPortfolioService_RetrieveOrCreatePortfolio_Handler,
		},
		{
			MethodName: "RetrieveOrCreatePortfolioItem",
			Handler:    _UserPortfolioService_RetrieveOrCreatePortfolioItem_Handler,
		},
		{
			MethodName: "DeletePortfolioItem",
			Handler:    _UserPortfolioService_DeletePortfolioItem_Handler,
		},
		{
			MethodName: "AvailableMarketItems",
			Handler:    _UserPortfolioService_AvailableMarketItems_Handler,
		},
		{
			MethodName: "MarketItemsPrices",
			Handler:    _UserPortfolioService_MarketItemsPrices_Handler,
		},
		{
			MethodName: "MarketLastPrices",
			Handler:    _UserPortfolioService_MarketLastPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
