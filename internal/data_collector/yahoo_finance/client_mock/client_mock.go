package client_mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/zBlur/homework-2/internal/data_collector/yahoo_finance/client.Client -o ./client_mock_test.go -n ClientMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/zBlur/homework-2/internal/data_collector/yahoo_finance"
	"gitlab.ozon.dev/zBlur/homework-2/internal/domain"
)

// ClientMock implements Client
type ClientMock struct {
	t minimock.Tester

	funcGetHistoricalMap          func(marketItems []domain.MarketItem, interval string, range_ string) (mp1 *map[domain.MarketItem]yahoo_finance.Historical, err error)
	inspectFuncGetHistoricalMap   func(marketItems []domain.MarketItem, interval string, range_ string)
	afterGetHistoricalMapCounter  uint64
	beforeGetHistoricalMapCounter uint64
	GetHistoricalMapMock          mClientMockGetHistoricalMap
}

// NewClientMock returns a mock for Client
func NewClientMock(t minimock.Tester) *ClientMock {
	m := &ClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetHistoricalMapMock = mClientMockGetHistoricalMap{mock: m}
	m.GetHistoricalMapMock.callArgs = []*ClientMockGetHistoricalMapParams{}

	return m
}

type mClientMockGetHistoricalMap struct {
	mock               *ClientMock
	defaultExpectation *ClientMockGetHistoricalMapExpectation
	expectations       []*ClientMockGetHistoricalMapExpectation

	callArgs []*ClientMockGetHistoricalMapParams
	mutex    sync.RWMutex
}

// ClientMockGetHistoricalMapExpectation specifies expectation struct of the Client.GetHistoricalMap
type ClientMockGetHistoricalMapExpectation struct {
	mock    *ClientMock
	params  *ClientMockGetHistoricalMapParams
	results *ClientMockGetHistoricalMapResults
	Counter uint64
}

// ClientMockGetHistoricalMapParams contains parameters of the Client.GetHistoricalMap
type ClientMockGetHistoricalMapParams struct {
	marketItems []domain.MarketItem
	interval    string
	range_      string
}

// ClientMockGetHistoricalMapResults contains results of the Client.GetHistoricalMap
type ClientMockGetHistoricalMapResults struct {
	mp1 *map[domain.MarketItem]yahoo_finance.Historical
	err error
}

// Expect sets up expected params for Client.GetHistoricalMap
func (mmGetHistoricalMap *mClientMockGetHistoricalMap) Expect(marketItems []domain.MarketItem, interval string, range_ string) *mClientMockGetHistoricalMap {
	if mmGetHistoricalMap.mock.funcGetHistoricalMap != nil {
		mmGetHistoricalMap.mock.t.Fatalf("ClientMock.GetHistoricalMap mock is already set by Set")
	}

	if mmGetHistoricalMap.defaultExpectation == nil {
		mmGetHistoricalMap.defaultExpectation = &ClientMockGetHistoricalMapExpectation{}
	}

	mmGetHistoricalMap.defaultExpectation.params = &ClientMockGetHistoricalMapParams{marketItems, interval, range_}
	for _, e := range mmGetHistoricalMap.expectations {
		if minimock.Equal(e.params, mmGetHistoricalMap.defaultExpectation.params) {
			mmGetHistoricalMap.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetHistoricalMap.defaultExpectation.params)
		}
	}

	return mmGetHistoricalMap
}

// Inspect accepts an inspector function that has same arguments as the Client.GetHistoricalMap
func (mmGetHistoricalMap *mClientMockGetHistoricalMap) Inspect(f func(marketItems []domain.MarketItem, interval string, range_ string)) *mClientMockGetHistoricalMap {
	if mmGetHistoricalMap.mock.inspectFuncGetHistoricalMap != nil {
		mmGetHistoricalMap.mock.t.Fatalf("Inspect function is already set for ClientMock.GetHistoricalMap")
	}

	mmGetHistoricalMap.mock.inspectFuncGetHistoricalMap = f

	return mmGetHistoricalMap
}

// Return sets up results that will be returned by Client.GetHistoricalMap
func (mmGetHistoricalMap *mClientMockGetHistoricalMap) Return(mp1 *map[domain.MarketItem]yahoo_finance.Historical, err error) *ClientMock {
	if mmGetHistoricalMap.mock.funcGetHistoricalMap != nil {
		mmGetHistoricalMap.mock.t.Fatalf("ClientMock.GetHistoricalMap mock is already set by Set")
	}

	if mmGetHistoricalMap.defaultExpectation == nil {
		mmGetHistoricalMap.defaultExpectation = &ClientMockGetHistoricalMapExpectation{mock: mmGetHistoricalMap.mock}
	}
	mmGetHistoricalMap.defaultExpectation.results = &ClientMockGetHistoricalMapResults{mp1, err}
	return mmGetHistoricalMap.mock
}

//Set uses given function f to mock the Client.GetHistoricalMap method
func (mmGetHistoricalMap *mClientMockGetHistoricalMap) Set(f func(marketItems []domain.MarketItem, interval string, range_ string) (mp1 *map[domain.MarketItem]yahoo_finance.Historical, err error)) *ClientMock {
	if mmGetHistoricalMap.defaultExpectation != nil {
		mmGetHistoricalMap.mock.t.Fatalf("Default expectation is already set for the Client.GetHistoricalMap method")
	}

	if len(mmGetHistoricalMap.expectations) > 0 {
		mmGetHistoricalMap.mock.t.Fatalf("Some expectations are already set for the Client.GetHistoricalMap method")
	}

	mmGetHistoricalMap.mock.funcGetHistoricalMap = f
	return mmGetHistoricalMap.mock
}

// When sets expectation for the Client.GetHistoricalMap which will trigger the result defined by the following
// Then helper
func (mmGetHistoricalMap *mClientMockGetHistoricalMap) When(marketItems []domain.MarketItem, interval string, range_ string) *ClientMockGetHistoricalMapExpectation {
	if mmGetHistoricalMap.mock.funcGetHistoricalMap != nil {
		mmGetHistoricalMap.mock.t.Fatalf("ClientMock.GetHistoricalMap mock is already set by Set")
	}

	expectation := &ClientMockGetHistoricalMapExpectation{
		mock:   mmGetHistoricalMap.mock,
		params: &ClientMockGetHistoricalMapParams{marketItems, interval, range_},
	}
	mmGetHistoricalMap.expectations = append(mmGetHistoricalMap.expectations, expectation)
	return expectation
}

// Then sets up Client.GetHistoricalMap return parameters for the expectation previously defined by the When method
func (e *ClientMockGetHistoricalMapExpectation) Then(mp1 *map[domain.MarketItem]yahoo_finance.Historical, err error) *ClientMock {
	e.results = &ClientMockGetHistoricalMapResults{mp1, err}
	return e.mock
}

// GetHistoricalMap implements Client
func (mmGetHistoricalMap *ClientMock) GetHistoricalMap(marketItems []domain.MarketItem, interval string, range_ string) (mp1 *map[domain.MarketItem]yahoo_finance.Historical, err error) {
	mm_atomic.AddUint64(&mmGetHistoricalMap.beforeGetHistoricalMapCounter, 1)
	defer mm_atomic.AddUint64(&mmGetHistoricalMap.afterGetHistoricalMapCounter, 1)

	if mmGetHistoricalMap.inspectFuncGetHistoricalMap != nil {
		mmGetHistoricalMap.inspectFuncGetHistoricalMap(marketItems, interval, range_)
	}

	mm_params := &ClientMockGetHistoricalMapParams{marketItems, interval, range_}

	// Record call args
	mmGetHistoricalMap.GetHistoricalMapMock.mutex.Lock()
	mmGetHistoricalMap.GetHistoricalMapMock.callArgs = append(mmGetHistoricalMap.GetHistoricalMapMock.callArgs, mm_params)
	mmGetHistoricalMap.GetHistoricalMapMock.mutex.Unlock()

	for _, e := range mmGetHistoricalMap.GetHistoricalMapMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1, e.results.err
		}
	}

	if mmGetHistoricalMap.GetHistoricalMapMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetHistoricalMap.GetHistoricalMapMock.defaultExpectation.Counter, 1)
		mm_want := mmGetHistoricalMap.GetHistoricalMapMock.defaultExpectation.params
		mm_got := ClientMockGetHistoricalMapParams{marketItems, interval, range_}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetHistoricalMap.t.Errorf("ClientMock.GetHistoricalMap got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetHistoricalMap.GetHistoricalMapMock.defaultExpectation.results
		if mm_results == nil {
			mmGetHistoricalMap.t.Fatal("No results are set for the ClientMock.GetHistoricalMap")
		}
		return (*mm_results).mp1, (*mm_results).err
	}
	if mmGetHistoricalMap.funcGetHistoricalMap != nil {
		return mmGetHistoricalMap.funcGetHistoricalMap(marketItems, interval, range_)
	}
	mmGetHistoricalMap.t.Fatalf("Unexpected call to ClientMock.GetHistoricalMap. %v %v %v", marketItems, interval, range_)
	return
}

// GetHistoricalMapAfterCounter returns a count of finished ClientMock.GetHistoricalMap invocations
func (mmGetHistoricalMap *ClientMock) GetHistoricalMapAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetHistoricalMap.afterGetHistoricalMapCounter)
}

// GetHistoricalMapBeforeCounter returns a count of ClientMock.GetHistoricalMap invocations
func (mmGetHistoricalMap *ClientMock) GetHistoricalMapBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetHistoricalMap.beforeGetHistoricalMapCounter)
}

// Calls returns a list of arguments used in each call to ClientMock.GetHistoricalMap.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetHistoricalMap *mClientMockGetHistoricalMap) Calls() []*ClientMockGetHistoricalMapParams {
	mmGetHistoricalMap.mutex.RLock()

	argCopy := make([]*ClientMockGetHistoricalMapParams, len(mmGetHistoricalMap.callArgs))
	copy(argCopy, mmGetHistoricalMap.callArgs)

	mmGetHistoricalMap.mutex.RUnlock()

	return argCopy
}

// MinimockGetHistoricalMapDone returns true if the count of the GetHistoricalMap invocations corresponds
// the number of defined expectations
func (m *ClientMock) MinimockGetHistoricalMapDone() bool {
	for _, e := range m.GetHistoricalMapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetHistoricalMapMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetHistoricalMapCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetHistoricalMap != nil && mm_atomic.LoadUint64(&m.afterGetHistoricalMapCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetHistoricalMapInspect logs each unmet expectation
func (m *ClientMock) MinimockGetHistoricalMapInspect() {
	for _, e := range m.GetHistoricalMapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ClientMock.GetHistoricalMap with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetHistoricalMapMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetHistoricalMapCounter) < 1 {
		if m.GetHistoricalMapMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ClientMock.GetHistoricalMap")
		} else {
			m.t.Errorf("Expected call to ClientMock.GetHistoricalMap with params: %#v", *m.GetHistoricalMapMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetHistoricalMap != nil && mm_atomic.LoadUint64(&m.afterGetHistoricalMapCounter) < 1 {
		m.t.Error("Expected call to ClientMock.GetHistoricalMap")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetHistoricalMapInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetHistoricalMapDone()
}
