package mock_repository

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/abrbird/portfolio_bot/internal/repository.CurrencyRepository -o ./currency_repository_mock_test.go -n CurrencyRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/abrbird/portfolio_bot/internal/domain"
)

// CurrencyRepositoryMock implements CurrencyRepository
type CurrencyRepositoryMock struct {
	t minimock.Tester

	funcRetrieve          func(ctx context.Context, currencyCode string) (c2 domain.CurrencyRetrieve)
	inspectFuncRetrieve   func(ctx context.Context, currencyCode string)
	afterRetrieveCounter  uint64
	beforeRetrieveCounter uint64
	RetrieveMock          mCurrencyRepositoryMockRetrieve
}

// NewCurrencyRepositoryMock returns a mock for CurrencyRepository
func NewCurrencyRepositoryMock(t minimock.Tester) *CurrencyRepositoryMock {
	m := &CurrencyRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RetrieveMock = mCurrencyRepositoryMockRetrieve{mock: m}
	m.RetrieveMock.callArgs = []*CurrencyRepositoryMockRetrieveParams{}

	return m
}

type mCurrencyRepositoryMockRetrieve struct {
	mock               *CurrencyRepositoryMock
	defaultExpectation *CurrencyRepositoryMockRetrieveExpectation
	expectations       []*CurrencyRepositoryMockRetrieveExpectation

	callArgs []*CurrencyRepositoryMockRetrieveParams
	mutex    sync.RWMutex
}

// CurrencyRepositoryMockRetrieveExpectation specifies expectation struct of the CurrencyRepository.Retrieve
type CurrencyRepositoryMockRetrieveExpectation struct {
	mock    *CurrencyRepositoryMock
	params  *CurrencyRepositoryMockRetrieveParams
	results *CurrencyRepositoryMockRetrieveResults
	Counter uint64
}

// CurrencyRepositoryMockRetrieveParams contains parameters of the CurrencyRepository.Retrieve
type CurrencyRepositoryMockRetrieveParams struct {
	ctx          context.Context
	currencyCode string
}

// CurrencyRepositoryMockRetrieveResults contains results of the CurrencyRepository.Retrieve
type CurrencyRepositoryMockRetrieveResults struct {
	c2 domain.CurrencyRetrieve
}

// Expect sets up expected params for CurrencyRepository.Retrieve
func (mmRetrieve *mCurrencyRepositoryMockRetrieve) Expect(ctx context.Context, currencyCode string) *mCurrencyRepositoryMockRetrieve {
	if mmRetrieve.mock.funcRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("CurrencyRepositoryMock.Retrieve mock is already set by Set")
	}

	if mmRetrieve.defaultExpectation == nil {
		mmRetrieve.defaultExpectation = &CurrencyRepositoryMockRetrieveExpectation{}
	}

	mmRetrieve.defaultExpectation.params = &CurrencyRepositoryMockRetrieveParams{ctx, currencyCode}
	for _, e := range mmRetrieve.expectations {
		if minimock.Equal(e.params, mmRetrieve.defaultExpectation.params) {
			mmRetrieve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRetrieve.defaultExpectation.params)
		}
	}

	return mmRetrieve
}

// Inspect accepts an inspector function that has same arguments as the CurrencyRepository.Retrieve
func (mmRetrieve *mCurrencyRepositoryMockRetrieve) Inspect(f func(ctx context.Context, currencyCode string)) *mCurrencyRepositoryMockRetrieve {
	if mmRetrieve.mock.inspectFuncRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("Inspect function is already set for CurrencyRepositoryMock.Retrieve")
	}

	mmRetrieve.mock.inspectFuncRetrieve = f

	return mmRetrieve
}

// Return sets up results that will be returned by CurrencyRepository.Retrieve
func (mmRetrieve *mCurrencyRepositoryMockRetrieve) Return(c2 domain.CurrencyRetrieve) *CurrencyRepositoryMock {
	if mmRetrieve.mock.funcRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("CurrencyRepositoryMock.Retrieve mock is already set by Set")
	}

	if mmRetrieve.defaultExpectation == nil {
		mmRetrieve.defaultExpectation = &CurrencyRepositoryMockRetrieveExpectation{mock: mmRetrieve.mock}
	}
	mmRetrieve.defaultExpectation.results = &CurrencyRepositoryMockRetrieveResults{c2}
	return mmRetrieve.mock
}

//Set uses given function f to mock the CurrencyRepository.Retrieve method
func (mmRetrieve *mCurrencyRepositoryMockRetrieve) Set(f func(ctx context.Context, currencyCode string) (c2 domain.CurrencyRetrieve)) *CurrencyRepositoryMock {
	if mmRetrieve.defaultExpectation != nil {
		mmRetrieve.mock.t.Fatalf("Default expectation is already set for the CurrencyRepository.Retrieve method")
	}

	if len(mmRetrieve.expectations) > 0 {
		mmRetrieve.mock.t.Fatalf("Some expectations are already set for the CurrencyRepository.Retrieve method")
	}

	mmRetrieve.mock.funcRetrieve = f
	return mmRetrieve.mock
}

// When sets expectation for the CurrencyRepository.Retrieve which will trigger the result defined by the following
// Then helper
func (mmRetrieve *mCurrencyRepositoryMockRetrieve) When(ctx context.Context, currencyCode string) *CurrencyRepositoryMockRetrieveExpectation {
	if mmRetrieve.mock.funcRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("CurrencyRepositoryMock.Retrieve mock is already set by Set")
	}

	expectation := &CurrencyRepositoryMockRetrieveExpectation{
		mock:   mmRetrieve.mock,
		params: &CurrencyRepositoryMockRetrieveParams{ctx, currencyCode},
	}
	mmRetrieve.expectations = append(mmRetrieve.expectations, expectation)
	return expectation
}

// Then sets up CurrencyRepository.Retrieve return parameters for the expectation previously defined by the When method
func (e *CurrencyRepositoryMockRetrieveExpectation) Then(c2 domain.CurrencyRetrieve) *CurrencyRepositoryMock {
	e.results = &CurrencyRepositoryMockRetrieveResults{c2}
	return e.mock
}

// Retrieve implements CurrencyRepository
func (mmRetrieve *CurrencyRepositoryMock) Retrieve(ctx context.Context, currencyCode string) (c2 domain.CurrencyRetrieve) {
	mm_atomic.AddUint64(&mmRetrieve.beforeRetrieveCounter, 1)
	defer mm_atomic.AddUint64(&mmRetrieve.afterRetrieveCounter, 1)

	if mmRetrieve.inspectFuncRetrieve != nil {
		mmRetrieve.inspectFuncRetrieve(ctx, currencyCode)
	}

	mm_params := &CurrencyRepositoryMockRetrieveParams{ctx, currencyCode}

	// Record call args
	mmRetrieve.RetrieveMock.mutex.Lock()
	mmRetrieve.RetrieveMock.callArgs = append(mmRetrieve.RetrieveMock.callArgs, mm_params)
	mmRetrieve.RetrieveMock.mutex.Unlock()

	for _, e := range mmRetrieve.RetrieveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.c2
		}
	}

	if mmRetrieve.RetrieveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRetrieve.RetrieveMock.defaultExpectation.Counter, 1)
		mm_want := mmRetrieve.RetrieveMock.defaultExpectation.params
		mm_got := CurrencyRepositoryMockRetrieveParams{ctx, currencyCode}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRetrieve.t.Errorf("CurrencyRepositoryMock.Retrieve got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRetrieve.RetrieveMock.defaultExpectation.results
		if mm_results == nil {
			mmRetrieve.t.Fatal("No results are set for the CurrencyRepositoryMock.Retrieve")
		}
		return (*mm_results).c2
	}
	if mmRetrieve.funcRetrieve != nil {
		return mmRetrieve.funcRetrieve(ctx, currencyCode)
	}
	mmRetrieve.t.Fatalf("Unexpected call to CurrencyRepositoryMock.Retrieve. %v %v", ctx, currencyCode)
	return
}

// RetrieveAfterCounter returns a count of finished CurrencyRepositoryMock.Retrieve invocations
func (mmRetrieve *CurrencyRepositoryMock) RetrieveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieve.afterRetrieveCounter)
}

// RetrieveBeforeCounter returns a count of CurrencyRepositoryMock.Retrieve invocations
func (mmRetrieve *CurrencyRepositoryMock) RetrieveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieve.beforeRetrieveCounter)
}

// Calls returns a list of arguments used in each call to CurrencyRepositoryMock.Retrieve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRetrieve *mCurrencyRepositoryMockRetrieve) Calls() []*CurrencyRepositoryMockRetrieveParams {
	mmRetrieve.mutex.RLock()

	argCopy := make([]*CurrencyRepositoryMockRetrieveParams, len(mmRetrieve.callArgs))
	copy(argCopy, mmRetrieve.callArgs)

	mmRetrieve.mutex.RUnlock()

	return argCopy
}

// MinimockRetrieveDone returns true if the count of the Retrieve invocations corresponds
// the number of defined expectations
func (m *CurrencyRepositoryMock) MinimockRetrieveDone() bool {
	for _, e := range m.RetrieveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieve != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		return false
	}
	return true
}

// MinimockRetrieveInspect logs each unmet expectation
func (m *CurrencyRepositoryMock) MinimockRetrieveInspect() {
	for _, e := range m.RetrieveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CurrencyRepositoryMock.Retrieve with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		if m.RetrieveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CurrencyRepositoryMock.Retrieve")
		} else {
			m.t.Errorf("Expected call to CurrencyRepositoryMock.Retrieve with params: %#v", *m.RetrieveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieve != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		m.t.Error("Expected call to CurrencyRepositoryMock.Retrieve")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CurrencyRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRetrieveInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CurrencyRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CurrencyRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRetrieveDone()
}
