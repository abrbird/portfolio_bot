package mock_repository

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i gitlab.ozon.dev/zBlur/homework-2/internal/repository.MarketItemRepository -o ./market_item_repository_mock_test.go -n MarketItemRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/zBlur/homework-2/internal/domain"
)

// MarketItemRepositoryMock implements MarketItemRepository
type MarketItemRepositoryMock struct {
	t minimock.Tester

	funcRetrieve          func(ctx context.Context, code string, type_ string) (m1 domain.MarketItemRetrieve)
	inspectFuncRetrieve   func(ctx context.Context, code string, type_ string)
	afterRetrieveCounter  uint64
	beforeRetrieveCounter uint64
	RetrieveMock          mMarketItemRepositoryMockRetrieve

	funcRetrieveById          func(ctx context.Context, marketItemId int64) (m1 domain.MarketItemRetrieve)
	inspectFuncRetrieveById   func(ctx context.Context, marketItemId int64)
	afterRetrieveByIdCounter  uint64
	beforeRetrieveByIdCounter uint64
	RetrieveByIdMock          mMarketItemRepositoryMockRetrieveById

	funcRetrieveByType          func(ctx context.Context, codes []string, type_ string) (mp1 *domain.MarketItemsRetrieve)
	inspectFuncRetrieveByType   func(ctx context.Context, codes []string, type_ string)
	afterRetrieveByTypeCounter  uint64
	beforeRetrieveByTypeCounter uint64
	RetrieveByTypeMock          mMarketItemRepositoryMockRetrieveByType
}

// NewMarketItemRepositoryMock returns a mock for MarketItemRepository
func NewMarketItemRepositoryMock(t minimock.Tester) *MarketItemRepositoryMock {
	m := &MarketItemRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RetrieveMock = mMarketItemRepositoryMockRetrieve{mock: m}
	m.RetrieveMock.callArgs = []*MarketItemRepositoryMockRetrieveParams{}

	m.RetrieveByIdMock = mMarketItemRepositoryMockRetrieveById{mock: m}
	m.RetrieveByIdMock.callArgs = []*MarketItemRepositoryMockRetrieveByIdParams{}

	m.RetrieveByTypeMock = mMarketItemRepositoryMockRetrieveByType{mock: m}
	m.RetrieveByTypeMock.callArgs = []*MarketItemRepositoryMockRetrieveByTypeParams{}

	return m
}

type mMarketItemRepositoryMockRetrieve struct {
	mock               *MarketItemRepositoryMock
	defaultExpectation *MarketItemRepositoryMockRetrieveExpectation
	expectations       []*MarketItemRepositoryMockRetrieveExpectation

	callArgs []*MarketItemRepositoryMockRetrieveParams
	mutex    sync.RWMutex
}

// MarketItemRepositoryMockRetrieveExpectation specifies expectation struct of the MarketItemRepository.Retrieve
type MarketItemRepositoryMockRetrieveExpectation struct {
	mock    *MarketItemRepositoryMock
	params  *MarketItemRepositoryMockRetrieveParams
	results *MarketItemRepositoryMockRetrieveResults
	Counter uint64
}

// MarketItemRepositoryMockRetrieveParams contains parameters of the MarketItemRepository.Retrieve
type MarketItemRepositoryMockRetrieveParams struct {
	ctx   context.Context
	code  string
	type_ string
}

// MarketItemRepositoryMockRetrieveResults contains results of the MarketItemRepository.Retrieve
type MarketItemRepositoryMockRetrieveResults struct {
	m1 domain.MarketItemRetrieve
}

// Expect sets up expected params for MarketItemRepository.Retrieve
func (mmRetrieve *mMarketItemRepositoryMockRetrieve) Expect(ctx context.Context, code string, type_ string) *mMarketItemRepositoryMockRetrieve {
	if mmRetrieve.mock.funcRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("MarketItemRepositoryMock.Retrieve mock is already set by Set")
	}

	if mmRetrieve.defaultExpectation == nil {
		mmRetrieve.defaultExpectation = &MarketItemRepositoryMockRetrieveExpectation{}
	}

	mmRetrieve.defaultExpectation.params = &MarketItemRepositoryMockRetrieveParams{ctx, code, type_}
	for _, e := range mmRetrieve.expectations {
		if minimock.Equal(e.params, mmRetrieve.defaultExpectation.params) {
			mmRetrieve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRetrieve.defaultExpectation.params)
		}
	}

	return mmRetrieve
}

// Inspect accepts an inspector function that has same arguments as the MarketItemRepository.Retrieve
func (mmRetrieve *mMarketItemRepositoryMockRetrieve) Inspect(f func(ctx context.Context, code string, type_ string)) *mMarketItemRepositoryMockRetrieve {
	if mmRetrieve.mock.inspectFuncRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("Inspect function is already set for MarketItemRepositoryMock.Retrieve")
	}

	mmRetrieve.mock.inspectFuncRetrieve = f

	return mmRetrieve
}

// Return sets up results that will be returned by MarketItemRepository.Retrieve
func (mmRetrieve *mMarketItemRepositoryMockRetrieve) Return(m1 domain.MarketItemRetrieve) *MarketItemRepositoryMock {
	if mmRetrieve.mock.funcRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("MarketItemRepositoryMock.Retrieve mock is already set by Set")
	}

	if mmRetrieve.defaultExpectation == nil {
		mmRetrieve.defaultExpectation = &MarketItemRepositoryMockRetrieveExpectation{mock: mmRetrieve.mock}
	}
	mmRetrieve.defaultExpectation.results = &MarketItemRepositoryMockRetrieveResults{m1}
	return mmRetrieve.mock
}

//Set uses given function f to mock the MarketItemRepository.Retrieve method
func (mmRetrieve *mMarketItemRepositoryMockRetrieve) Set(f func(ctx context.Context, code string, type_ string) (m1 domain.MarketItemRetrieve)) *MarketItemRepositoryMock {
	if mmRetrieve.defaultExpectation != nil {
		mmRetrieve.mock.t.Fatalf("Default expectation is already set for the MarketItemRepository.Retrieve method")
	}

	if len(mmRetrieve.expectations) > 0 {
		mmRetrieve.mock.t.Fatalf("Some expectations are already set for the MarketItemRepository.Retrieve method")
	}

	mmRetrieve.mock.funcRetrieve = f
	return mmRetrieve.mock
}

// When sets expectation for the MarketItemRepository.Retrieve which will trigger the result defined by the following
// Then helper
func (mmRetrieve *mMarketItemRepositoryMockRetrieve) When(ctx context.Context, code string, type_ string) *MarketItemRepositoryMockRetrieveExpectation {
	if mmRetrieve.mock.funcRetrieve != nil {
		mmRetrieve.mock.t.Fatalf("MarketItemRepositoryMock.Retrieve mock is already set by Set")
	}

	expectation := &MarketItemRepositoryMockRetrieveExpectation{
		mock:   mmRetrieve.mock,
		params: &MarketItemRepositoryMockRetrieveParams{ctx, code, type_},
	}
	mmRetrieve.expectations = append(mmRetrieve.expectations, expectation)
	return expectation
}

// Then sets up MarketItemRepository.Retrieve return parameters for the expectation previously defined by the When method
func (e *MarketItemRepositoryMockRetrieveExpectation) Then(m1 domain.MarketItemRetrieve) *MarketItemRepositoryMock {
	e.results = &MarketItemRepositoryMockRetrieveResults{m1}
	return e.mock
}

// Retrieve implements MarketItemRepository
func (mmRetrieve *MarketItemRepositoryMock) Retrieve(ctx context.Context, code string, type_ string) (m1 domain.MarketItemRetrieve) {
	mm_atomic.AddUint64(&mmRetrieve.beforeRetrieveCounter, 1)
	defer mm_atomic.AddUint64(&mmRetrieve.afterRetrieveCounter, 1)

	if mmRetrieve.inspectFuncRetrieve != nil {
		mmRetrieve.inspectFuncRetrieve(ctx, code, type_)
	}

	mm_params := &MarketItemRepositoryMockRetrieveParams{ctx, code, type_}

	// Record call args
	mmRetrieve.RetrieveMock.mutex.Lock()
	mmRetrieve.RetrieveMock.callArgs = append(mmRetrieve.RetrieveMock.callArgs, mm_params)
	mmRetrieve.RetrieveMock.mutex.Unlock()

	for _, e := range mmRetrieve.RetrieveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1
		}
	}

	if mmRetrieve.RetrieveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRetrieve.RetrieveMock.defaultExpectation.Counter, 1)
		mm_want := mmRetrieve.RetrieveMock.defaultExpectation.params
		mm_got := MarketItemRepositoryMockRetrieveParams{ctx, code, type_}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRetrieve.t.Errorf("MarketItemRepositoryMock.Retrieve got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRetrieve.RetrieveMock.defaultExpectation.results
		if mm_results == nil {
			mmRetrieve.t.Fatal("No results are set for the MarketItemRepositoryMock.Retrieve")
		}
		return (*mm_results).m1
	}
	if mmRetrieve.funcRetrieve != nil {
		return mmRetrieve.funcRetrieve(ctx, code, type_)
	}
	mmRetrieve.t.Fatalf("Unexpected call to MarketItemRepositoryMock.Retrieve. %v %v %v", ctx, code, type_)
	return
}

// RetrieveAfterCounter returns a count of finished MarketItemRepositoryMock.Retrieve invocations
func (mmRetrieve *MarketItemRepositoryMock) RetrieveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieve.afterRetrieveCounter)
}

// RetrieveBeforeCounter returns a count of MarketItemRepositoryMock.Retrieve invocations
func (mmRetrieve *MarketItemRepositoryMock) RetrieveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieve.beforeRetrieveCounter)
}

// Calls returns a list of arguments used in each call to MarketItemRepositoryMock.Retrieve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRetrieve *mMarketItemRepositoryMockRetrieve) Calls() []*MarketItemRepositoryMockRetrieveParams {
	mmRetrieve.mutex.RLock()

	argCopy := make([]*MarketItemRepositoryMockRetrieveParams, len(mmRetrieve.callArgs))
	copy(argCopy, mmRetrieve.callArgs)

	mmRetrieve.mutex.RUnlock()

	return argCopy
}

// MinimockRetrieveDone returns true if the count of the Retrieve invocations corresponds
// the number of defined expectations
func (m *MarketItemRepositoryMock) MinimockRetrieveDone() bool {
	for _, e := range m.RetrieveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieve != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		return false
	}
	return true
}

// MinimockRetrieveInspect logs each unmet expectation
func (m *MarketItemRepositoryMock) MinimockRetrieveInspect() {
	for _, e := range m.RetrieveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MarketItemRepositoryMock.Retrieve with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		if m.RetrieveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MarketItemRepositoryMock.Retrieve")
		} else {
			m.t.Errorf("Expected call to MarketItemRepositoryMock.Retrieve with params: %#v", *m.RetrieveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieve != nil && mm_atomic.LoadUint64(&m.afterRetrieveCounter) < 1 {
		m.t.Error("Expected call to MarketItemRepositoryMock.Retrieve")
	}
}

type mMarketItemRepositoryMockRetrieveById struct {
	mock               *MarketItemRepositoryMock
	defaultExpectation *MarketItemRepositoryMockRetrieveByIdExpectation
	expectations       []*MarketItemRepositoryMockRetrieveByIdExpectation

	callArgs []*MarketItemRepositoryMockRetrieveByIdParams
	mutex    sync.RWMutex
}

// MarketItemRepositoryMockRetrieveByIdExpectation specifies expectation struct of the MarketItemRepository.RetrieveById
type MarketItemRepositoryMockRetrieveByIdExpectation struct {
	mock    *MarketItemRepositoryMock
	params  *MarketItemRepositoryMockRetrieveByIdParams
	results *MarketItemRepositoryMockRetrieveByIdResults
	Counter uint64
}

// MarketItemRepositoryMockRetrieveByIdParams contains parameters of the MarketItemRepository.RetrieveById
type MarketItemRepositoryMockRetrieveByIdParams struct {
	ctx          context.Context
	marketItemId int64
}

// MarketItemRepositoryMockRetrieveByIdResults contains results of the MarketItemRepository.RetrieveById
type MarketItemRepositoryMockRetrieveByIdResults struct {
	m1 domain.MarketItemRetrieve
}

// Expect sets up expected params for MarketItemRepository.RetrieveById
func (mmRetrieveById *mMarketItemRepositoryMockRetrieveById) Expect(ctx context.Context, marketItemId int64) *mMarketItemRepositoryMockRetrieveById {
	if mmRetrieveById.mock.funcRetrieveById != nil {
		mmRetrieveById.mock.t.Fatalf("MarketItemRepositoryMock.RetrieveById mock is already set by Set")
	}

	if mmRetrieveById.defaultExpectation == nil {
		mmRetrieveById.defaultExpectation = &MarketItemRepositoryMockRetrieveByIdExpectation{}
	}

	mmRetrieveById.defaultExpectation.params = &MarketItemRepositoryMockRetrieveByIdParams{ctx, marketItemId}
	for _, e := range mmRetrieveById.expectations {
		if minimock.Equal(e.params, mmRetrieveById.defaultExpectation.params) {
			mmRetrieveById.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRetrieveById.defaultExpectation.params)
		}
	}

	return mmRetrieveById
}

// Inspect accepts an inspector function that has same arguments as the MarketItemRepository.RetrieveById
func (mmRetrieveById *mMarketItemRepositoryMockRetrieveById) Inspect(f func(ctx context.Context, marketItemId int64)) *mMarketItemRepositoryMockRetrieveById {
	if mmRetrieveById.mock.inspectFuncRetrieveById != nil {
		mmRetrieveById.mock.t.Fatalf("Inspect function is already set for MarketItemRepositoryMock.RetrieveById")
	}

	mmRetrieveById.mock.inspectFuncRetrieveById = f

	return mmRetrieveById
}

// Return sets up results that will be returned by MarketItemRepository.RetrieveById
func (mmRetrieveById *mMarketItemRepositoryMockRetrieveById) Return(m1 domain.MarketItemRetrieve) *MarketItemRepositoryMock {
	if mmRetrieveById.mock.funcRetrieveById != nil {
		mmRetrieveById.mock.t.Fatalf("MarketItemRepositoryMock.RetrieveById mock is already set by Set")
	}

	if mmRetrieveById.defaultExpectation == nil {
		mmRetrieveById.defaultExpectation = &MarketItemRepositoryMockRetrieveByIdExpectation{mock: mmRetrieveById.mock}
	}
	mmRetrieveById.defaultExpectation.results = &MarketItemRepositoryMockRetrieveByIdResults{m1}
	return mmRetrieveById.mock
}

//Set uses given function f to mock the MarketItemRepository.RetrieveById method
func (mmRetrieveById *mMarketItemRepositoryMockRetrieveById) Set(f func(ctx context.Context, marketItemId int64) (m1 domain.MarketItemRetrieve)) *MarketItemRepositoryMock {
	if mmRetrieveById.defaultExpectation != nil {
		mmRetrieveById.mock.t.Fatalf("Default expectation is already set for the MarketItemRepository.RetrieveById method")
	}

	if len(mmRetrieveById.expectations) > 0 {
		mmRetrieveById.mock.t.Fatalf("Some expectations are already set for the MarketItemRepository.RetrieveById method")
	}

	mmRetrieveById.mock.funcRetrieveById = f
	return mmRetrieveById.mock
}

// When sets expectation for the MarketItemRepository.RetrieveById which will trigger the result defined by the following
// Then helper
func (mmRetrieveById *mMarketItemRepositoryMockRetrieveById) When(ctx context.Context, marketItemId int64) *MarketItemRepositoryMockRetrieveByIdExpectation {
	if mmRetrieveById.mock.funcRetrieveById != nil {
		mmRetrieveById.mock.t.Fatalf("MarketItemRepositoryMock.RetrieveById mock is already set by Set")
	}

	expectation := &MarketItemRepositoryMockRetrieveByIdExpectation{
		mock:   mmRetrieveById.mock,
		params: &MarketItemRepositoryMockRetrieveByIdParams{ctx, marketItemId},
	}
	mmRetrieveById.expectations = append(mmRetrieveById.expectations, expectation)
	return expectation
}

// Then sets up MarketItemRepository.RetrieveById return parameters for the expectation previously defined by the When method
func (e *MarketItemRepositoryMockRetrieveByIdExpectation) Then(m1 domain.MarketItemRetrieve) *MarketItemRepositoryMock {
	e.results = &MarketItemRepositoryMockRetrieveByIdResults{m1}
	return e.mock
}

// RetrieveById implements MarketItemRepository
func (mmRetrieveById *MarketItemRepositoryMock) RetrieveById(ctx context.Context, marketItemId int64) (m1 domain.MarketItemRetrieve) {
	mm_atomic.AddUint64(&mmRetrieveById.beforeRetrieveByIdCounter, 1)
	defer mm_atomic.AddUint64(&mmRetrieveById.afterRetrieveByIdCounter, 1)

	if mmRetrieveById.inspectFuncRetrieveById != nil {
		mmRetrieveById.inspectFuncRetrieveById(ctx, marketItemId)
	}

	mm_params := &MarketItemRepositoryMockRetrieveByIdParams{ctx, marketItemId}

	// Record call args
	mmRetrieveById.RetrieveByIdMock.mutex.Lock()
	mmRetrieveById.RetrieveByIdMock.callArgs = append(mmRetrieveById.RetrieveByIdMock.callArgs, mm_params)
	mmRetrieveById.RetrieveByIdMock.mutex.Unlock()

	for _, e := range mmRetrieveById.RetrieveByIdMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1
		}
	}

	if mmRetrieveById.RetrieveByIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRetrieveById.RetrieveByIdMock.defaultExpectation.Counter, 1)
		mm_want := mmRetrieveById.RetrieveByIdMock.defaultExpectation.params
		mm_got := MarketItemRepositoryMockRetrieveByIdParams{ctx, marketItemId}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRetrieveById.t.Errorf("MarketItemRepositoryMock.RetrieveById got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRetrieveById.RetrieveByIdMock.defaultExpectation.results
		if mm_results == nil {
			mmRetrieveById.t.Fatal("No results are set for the MarketItemRepositoryMock.RetrieveById")
		}
		return (*mm_results).m1
	}
	if mmRetrieveById.funcRetrieveById != nil {
		return mmRetrieveById.funcRetrieveById(ctx, marketItemId)
	}
	mmRetrieveById.t.Fatalf("Unexpected call to MarketItemRepositoryMock.RetrieveById. %v %v", ctx, marketItemId)
	return
}

// RetrieveByIdAfterCounter returns a count of finished MarketItemRepositoryMock.RetrieveById invocations
func (mmRetrieveById *MarketItemRepositoryMock) RetrieveByIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieveById.afterRetrieveByIdCounter)
}

// RetrieveByIdBeforeCounter returns a count of MarketItemRepositoryMock.RetrieveById invocations
func (mmRetrieveById *MarketItemRepositoryMock) RetrieveByIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieveById.beforeRetrieveByIdCounter)
}

// Calls returns a list of arguments used in each call to MarketItemRepositoryMock.RetrieveById.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRetrieveById *mMarketItemRepositoryMockRetrieveById) Calls() []*MarketItemRepositoryMockRetrieveByIdParams {
	mmRetrieveById.mutex.RLock()

	argCopy := make([]*MarketItemRepositoryMockRetrieveByIdParams, len(mmRetrieveById.callArgs))
	copy(argCopy, mmRetrieveById.callArgs)

	mmRetrieveById.mutex.RUnlock()

	return argCopy
}

// MinimockRetrieveByIdDone returns true if the count of the RetrieveById invocations corresponds
// the number of defined expectations
func (m *MarketItemRepositoryMock) MinimockRetrieveByIdDone() bool {
	for _, e := range m.RetrieveByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveByIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieveById != nil && mm_atomic.LoadUint64(&m.afterRetrieveByIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockRetrieveByIdInspect logs each unmet expectation
func (m *MarketItemRepositoryMock) MinimockRetrieveByIdInspect() {
	for _, e := range m.RetrieveByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MarketItemRepositoryMock.RetrieveById with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveByIdCounter) < 1 {
		if m.RetrieveByIdMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MarketItemRepositoryMock.RetrieveById")
		} else {
			m.t.Errorf("Expected call to MarketItemRepositoryMock.RetrieveById with params: %#v", *m.RetrieveByIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieveById != nil && mm_atomic.LoadUint64(&m.afterRetrieveByIdCounter) < 1 {
		m.t.Error("Expected call to MarketItemRepositoryMock.RetrieveById")
	}
}

type mMarketItemRepositoryMockRetrieveByType struct {
	mock               *MarketItemRepositoryMock
	defaultExpectation *MarketItemRepositoryMockRetrieveByTypeExpectation
	expectations       []*MarketItemRepositoryMockRetrieveByTypeExpectation

	callArgs []*MarketItemRepositoryMockRetrieveByTypeParams
	mutex    sync.RWMutex
}

// MarketItemRepositoryMockRetrieveByTypeExpectation specifies expectation struct of the MarketItemRepository.RetrieveByType
type MarketItemRepositoryMockRetrieveByTypeExpectation struct {
	mock    *MarketItemRepositoryMock
	params  *MarketItemRepositoryMockRetrieveByTypeParams
	results *MarketItemRepositoryMockRetrieveByTypeResults
	Counter uint64
}

// MarketItemRepositoryMockRetrieveByTypeParams contains parameters of the MarketItemRepository.RetrieveByType
type MarketItemRepositoryMockRetrieveByTypeParams struct {
	ctx   context.Context
	codes []string
	type_ string
}

// MarketItemRepositoryMockRetrieveByTypeResults contains results of the MarketItemRepository.RetrieveByType
type MarketItemRepositoryMockRetrieveByTypeResults struct {
	mp1 *domain.MarketItemsRetrieve
}

// Expect sets up expected params for MarketItemRepository.RetrieveByType
func (mmRetrieveByType *mMarketItemRepositoryMockRetrieveByType) Expect(ctx context.Context, codes []string, type_ string) *mMarketItemRepositoryMockRetrieveByType {
	if mmRetrieveByType.mock.funcRetrieveByType != nil {
		mmRetrieveByType.mock.t.Fatalf("MarketItemRepositoryMock.RetrieveByType mock is already set by Set")
	}

	if mmRetrieveByType.defaultExpectation == nil {
		mmRetrieveByType.defaultExpectation = &MarketItemRepositoryMockRetrieveByTypeExpectation{}
	}

	mmRetrieveByType.defaultExpectation.params = &MarketItemRepositoryMockRetrieveByTypeParams{ctx, codes, type_}
	for _, e := range mmRetrieveByType.expectations {
		if minimock.Equal(e.params, mmRetrieveByType.defaultExpectation.params) {
			mmRetrieveByType.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRetrieveByType.defaultExpectation.params)
		}
	}

	return mmRetrieveByType
}

// Inspect accepts an inspector function that has same arguments as the MarketItemRepository.RetrieveByType
func (mmRetrieveByType *mMarketItemRepositoryMockRetrieveByType) Inspect(f func(ctx context.Context, codes []string, type_ string)) *mMarketItemRepositoryMockRetrieveByType {
	if mmRetrieveByType.mock.inspectFuncRetrieveByType != nil {
		mmRetrieveByType.mock.t.Fatalf("Inspect function is already set for MarketItemRepositoryMock.RetrieveByType")
	}

	mmRetrieveByType.mock.inspectFuncRetrieveByType = f

	return mmRetrieveByType
}

// Return sets up results that will be returned by MarketItemRepository.RetrieveByType
func (mmRetrieveByType *mMarketItemRepositoryMockRetrieveByType) Return(mp1 *domain.MarketItemsRetrieve) *MarketItemRepositoryMock {
	if mmRetrieveByType.mock.funcRetrieveByType != nil {
		mmRetrieveByType.mock.t.Fatalf("MarketItemRepositoryMock.RetrieveByType mock is already set by Set")
	}

	if mmRetrieveByType.defaultExpectation == nil {
		mmRetrieveByType.defaultExpectation = &MarketItemRepositoryMockRetrieveByTypeExpectation{mock: mmRetrieveByType.mock}
	}
	mmRetrieveByType.defaultExpectation.results = &MarketItemRepositoryMockRetrieveByTypeResults{mp1}
	return mmRetrieveByType.mock
}

//Set uses given function f to mock the MarketItemRepository.RetrieveByType method
func (mmRetrieveByType *mMarketItemRepositoryMockRetrieveByType) Set(f func(ctx context.Context, codes []string, type_ string) (mp1 *domain.MarketItemsRetrieve)) *MarketItemRepositoryMock {
	if mmRetrieveByType.defaultExpectation != nil {
		mmRetrieveByType.mock.t.Fatalf("Default expectation is already set for the MarketItemRepository.RetrieveByType method")
	}

	if len(mmRetrieveByType.expectations) > 0 {
		mmRetrieveByType.mock.t.Fatalf("Some expectations are already set for the MarketItemRepository.RetrieveByType method")
	}

	mmRetrieveByType.mock.funcRetrieveByType = f
	return mmRetrieveByType.mock
}

// When sets expectation for the MarketItemRepository.RetrieveByType which will trigger the result defined by the following
// Then helper
func (mmRetrieveByType *mMarketItemRepositoryMockRetrieveByType) When(ctx context.Context, codes []string, type_ string) *MarketItemRepositoryMockRetrieveByTypeExpectation {
	if mmRetrieveByType.mock.funcRetrieveByType != nil {
		mmRetrieveByType.mock.t.Fatalf("MarketItemRepositoryMock.RetrieveByType mock is already set by Set")
	}

	expectation := &MarketItemRepositoryMockRetrieveByTypeExpectation{
		mock:   mmRetrieveByType.mock,
		params: &MarketItemRepositoryMockRetrieveByTypeParams{ctx, codes, type_},
	}
	mmRetrieveByType.expectations = append(mmRetrieveByType.expectations, expectation)
	return expectation
}

// Then sets up MarketItemRepository.RetrieveByType return parameters for the expectation previously defined by the When method
func (e *MarketItemRepositoryMockRetrieveByTypeExpectation) Then(mp1 *domain.MarketItemsRetrieve) *MarketItemRepositoryMock {
	e.results = &MarketItemRepositoryMockRetrieveByTypeResults{mp1}
	return e.mock
}

// RetrieveByType implements MarketItemRepository
func (mmRetrieveByType *MarketItemRepositoryMock) RetrieveByType(ctx context.Context, codes []string, type_ string) (mp1 *domain.MarketItemsRetrieve) {
	mm_atomic.AddUint64(&mmRetrieveByType.beforeRetrieveByTypeCounter, 1)
	defer mm_atomic.AddUint64(&mmRetrieveByType.afterRetrieveByTypeCounter, 1)

	if mmRetrieveByType.inspectFuncRetrieveByType != nil {
		mmRetrieveByType.inspectFuncRetrieveByType(ctx, codes, type_)
	}

	mm_params := &MarketItemRepositoryMockRetrieveByTypeParams{ctx, codes, type_}

	// Record call args
	mmRetrieveByType.RetrieveByTypeMock.mutex.Lock()
	mmRetrieveByType.RetrieveByTypeMock.callArgs = append(mmRetrieveByType.RetrieveByTypeMock.callArgs, mm_params)
	mmRetrieveByType.RetrieveByTypeMock.mutex.Unlock()

	for _, e := range mmRetrieveByType.RetrieveByTypeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mp1
		}
	}

	if mmRetrieveByType.RetrieveByTypeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRetrieveByType.RetrieveByTypeMock.defaultExpectation.Counter, 1)
		mm_want := mmRetrieveByType.RetrieveByTypeMock.defaultExpectation.params
		mm_got := MarketItemRepositoryMockRetrieveByTypeParams{ctx, codes, type_}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRetrieveByType.t.Errorf("MarketItemRepositoryMock.RetrieveByType got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRetrieveByType.RetrieveByTypeMock.defaultExpectation.results
		if mm_results == nil {
			mmRetrieveByType.t.Fatal("No results are set for the MarketItemRepositoryMock.RetrieveByType")
		}
		return (*mm_results).mp1
	}
	if mmRetrieveByType.funcRetrieveByType != nil {
		return mmRetrieveByType.funcRetrieveByType(ctx, codes, type_)
	}
	mmRetrieveByType.t.Fatalf("Unexpected call to MarketItemRepositoryMock.RetrieveByType. %v %v %v", ctx, codes, type_)
	return
}

// RetrieveByTypeAfterCounter returns a count of finished MarketItemRepositoryMock.RetrieveByType invocations
func (mmRetrieveByType *MarketItemRepositoryMock) RetrieveByTypeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieveByType.afterRetrieveByTypeCounter)
}

// RetrieveByTypeBeforeCounter returns a count of MarketItemRepositoryMock.RetrieveByType invocations
func (mmRetrieveByType *MarketItemRepositoryMock) RetrieveByTypeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRetrieveByType.beforeRetrieveByTypeCounter)
}

// Calls returns a list of arguments used in each call to MarketItemRepositoryMock.RetrieveByType.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRetrieveByType *mMarketItemRepositoryMockRetrieveByType) Calls() []*MarketItemRepositoryMockRetrieveByTypeParams {
	mmRetrieveByType.mutex.RLock()

	argCopy := make([]*MarketItemRepositoryMockRetrieveByTypeParams, len(mmRetrieveByType.callArgs))
	copy(argCopy, mmRetrieveByType.callArgs)

	mmRetrieveByType.mutex.RUnlock()

	return argCopy
}

// MinimockRetrieveByTypeDone returns true if the count of the RetrieveByType invocations corresponds
// the number of defined expectations
func (m *MarketItemRepositoryMock) MinimockRetrieveByTypeDone() bool {
	for _, e := range m.RetrieveByTypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveByTypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveByTypeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieveByType != nil && mm_atomic.LoadUint64(&m.afterRetrieveByTypeCounter) < 1 {
		return false
	}
	return true
}

// MinimockRetrieveByTypeInspect logs each unmet expectation
func (m *MarketItemRepositoryMock) MinimockRetrieveByTypeInspect() {
	for _, e := range m.RetrieveByTypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MarketItemRepositoryMock.RetrieveByType with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RetrieveByTypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRetrieveByTypeCounter) < 1 {
		if m.RetrieveByTypeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MarketItemRepositoryMock.RetrieveByType")
		} else {
			m.t.Errorf("Expected call to MarketItemRepositoryMock.RetrieveByType with params: %#v", *m.RetrieveByTypeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRetrieveByType != nil && mm_atomic.LoadUint64(&m.afterRetrieveByTypeCounter) < 1 {
		m.t.Error("Expected call to MarketItemRepositoryMock.RetrieveByType")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MarketItemRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRetrieveInspect()

		m.MinimockRetrieveByIdInspect()

		m.MinimockRetrieveByTypeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MarketItemRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MarketItemRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRetrieveDone() &&
		m.MinimockRetrieveByIdDone() &&
		m.MinimockRetrieveByTypeDone()
}
